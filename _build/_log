### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules test.ml > test.ml.depends
# Target: command.mli.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:mli, file:command.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules command.mli > command.mli.depends
# Target: courseJson.mli.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:mli, file:courseJson.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules courseJson.mli > courseJson.mli.depends # cached
# Target: userSurvey.mli.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:mli, file:userSurvey.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules userSurvey.mli > userSurvey.mli.depends # cached
# Target: command.cmi, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:mli, file:command.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o command.cmi command.mli
# Target: courseJson.cmi, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:mli, file:courseJson.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o courseJson.cmi courseJson.mli
# Target: userSurvey.cmi, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:mli, file:userSurvey.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o userSurvey.cmi userSurvey.mli
# Target: test.cmo, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o test.cmo test.ml
# Target: command.ml.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:ml, file:command.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules command.ml > command.ml.depends
# Target: courseJson.ml.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:ml, file:courseJson.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules courseJson.ml > courseJson.ml.depends # cached
# Target: userSurvey.ml.depends, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), debug, extension:ml, file:userSurvey.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -modules userSurvey.ml > userSurvey.ml.depends # cached
# Target: command.cmo, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o command.cmo command.ml
# Target: courseJson.cmo, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:courseJson.cmo, file:courseJson.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o courseJson.cmo courseJson.ml
# Target: userSurvey.cmo, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:userSurvey.cmo, file:userSurvey.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl -o userSurvey.cmo userSurvey.ml
# Target: test.byte, tags: { package(ANSITerminal), package(cohttp), package(cohttp-lwt-unix), package(lwt), package(lwt_ssl), package(oUnit), package(ssl), package(threads), package(yojson), byte, debug, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, thread, traverse }
ocamlfind ocamlc -linkpkg -g -thread -package oUnit -package yojson -package ANSITerminal -package lwt -package cohttp -package cohttp-lwt-unix -package threads -package ssl -package lwt_ssl command.cmo courseJson.cmo userSurvey.cmo test.cmo -o test.byte
# Compilation successful.
